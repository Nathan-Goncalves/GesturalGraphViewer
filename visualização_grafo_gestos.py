import math
import queue
import socket
import time
import webbrowser
from threading import Thread

import cv2
import dash
import mediapipe as mp
import networkx as nx
import numpy as np
import plotly.graph_objects as go
from dash import dcc, html, Input, Output

camnum = 0

def create_graph():
    """Criar um grafo NetworkX 3D"""
    # Criar grafo aleat√≥rio geom√©trico 3D
    g = nx.random_geometric_graph(20, 0.3, dim=3)

    # Garantir que as posi√ß√µes estejam definidas
    pos = nx.get_node_attributes(g, 'pos')
    for node, position in pos.items():
        g.nodes[node]['pos'] = np.array(position)

    return g


def euclidean_distance(p1, p2):
    return math.sqrt((p1.x - p2.x)**2 + (p1.y - p2.y)**2 + (p1.z - p2.z)**2)

def count_fingers(landmarks):
    """Conta dedos levantados considerando flex√£o leve"""
    finger_tips = [4, 8, 12, 16, 20]
    finger_pips = [3, 6, 10, 14, 18]

    fingers_up = 0

    # Polegar (compara√ß√£o horizontal)
    thumb_tip = landmarks[finger_tips[0]]
    thumb_pip = landmarks[finger_pips[0]]
    wrist = landmarks[0]
    if thumb_tip.x > wrist.x:  # assume m√£o direita. Inverter sinal se for m√£o esquerda
        fingers_up += 1

    # Outros dedos (compara√ß√£o vertical)
    for i in range(1, 5):
        tip = landmarks[finger_tips[i]]
        pip = landmarks[finger_pips[i]]
        if tip.y < pip.y * 0.95:  # Pequena margem para evitar ru√≠dos
            fingers_up += 1

    return fingers_up

def is_closed_fist(landmarks):
    """Verifica se todos os dedos est√£o pr√≥ximos ao punho"""
    wrist = landmarks[0]
    distances = []
    for tip_index in [4, 8, 12, 16, 20]:
        tip = landmarks[tip_index]
        distances.append(euclidean_distance(tip, wrist))

    avg_dist = sum(distances) / len(distances)
    return avg_dist < 0.1  # Ajuste sens√≠vel: entre 0.08 e 0.12

def detect_gestures(landmarks, debug=False):
    """
    Detecta gestos:
    - 'closed_fist' para m√£o fechada
    - 'open_hand' para m√£o aberta
    - 'none' se n√£o identificar
    """
    if not landmarks or len(landmarks) < 21:
        return "none"

    try:
        if is_closed_fist(landmarks):
            if debug:
                print("Avg dist dedos-punho: CLOSED")
            return "closed_fist"

        fingers_up = count_fingers(landmarks)

        if debug:
            print(f"Dedos levantados: {fingers_up}")

        if fingers_up == 0:
            return "closed_fist"
        elif fingers_up >= 4:
            return "open_hand"
        else:
            return "none"
    except Exception as e:
        if debug:
            print("Erro na detec√ß√£o:", e)
        return "none"
    
def find_free_port():
    """Encontrar uma porta livre"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('', 0))
        s.listen(1)
        port = s.getsockname()[1]
    return port




class HandMotionGraph3D:

    @staticmethod
    def normalize_vector(v):
        #return v
        norm = math.sqrt(v['x']**2 + v['y']**2 + v['z']**2)
        if norm == 0:
            return v
        return {k: v[k]/norm for k in v}

    def __init__(self):
        # Inicializar MediaPipe
        self.camera_theta = None
        self.camera_radius = None
        self.camera_phi = None
        self.mp_hands = mp.solutions.hands
        self.hands = self.mp_hands.Hands(
            static_image_mode=False,
            max_num_hands=1,
            min_detection_confidence=0.7,
            min_tracking_confidence=0.5
        )
        self.mp_draw = mp.solutions.drawing_utils

        # Configura√ß√µes de v√≠deo
        self.cap = cv2.VideoCapture(camnum)
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

        # Criar grafo NetworkX
        self.graph = create_graph()

        # Controle da c√¢mera/visualiza√ß√£o 3D
        #self.camera_eye = {'x': 1.5, 'y': 1.5, 'z': 1.5}
        self.camera_eye = {'x': 1, 'y': 1, 'z': 1}


        self.camera_eye = self.normalize_vector(self.camera_eye) ###



        self.camera_center = {'x': 0, 'y': 0, 'z': 0}
        self.zoom_factor = 1.0

        # Suaviza√ß√£o e hist√≥rico
        self.smoothing_factor = 0.3
        self.previous_hand_position = None

        # Estado da aplica√ß√£o
        self.running = False
        self.hand_detected = False
        self.current_gesture = "none"
        self.hand_position = {'x': 0.5, 'y': 0.5}

        # Configura√ß√µes de sensibilidade
        self.rotation_sensitivity = 3.0
        self.movement_sensitivity = 2.0
        self.zoom_sensitivity = 0.15

        # Queue para comunica√ß√£o entre threads
        self.data_queue = queue.Queue(maxsize=10)

        # Dash app
        self.app = dash.Dash(__name__)
        self.setup_dash_app()

    def setup_dash_app(self):
        """Configurar aplica√ß√£o Dash para visualiza√ß√£o em tempo real"""
        self.app.layout = html.Div([
            html.H1("ü§ö Controle de Grafo 3D com Gestos da M√£o",
                    style={'textAlign': 'center', 'color': '#2c3e50', 'marginBottom': 30}),

            html.Div([
                html.Div([
                    html.H3("Controles", style={'color': '#34495e'}),
                    html.Div(id='status-info', style={
                        'padding': '15px',
                        'backgroundColor': '#ecf0f1',
                        'borderRadius': '10px',
                        'marginBottom': '20px',
                        'boxShadow': '0 4px 16px rgba(44,62,80,0.08)',
                    }),
                    html.Div([
                        html.Button('Reset Visualiza√ß√£o', id='reset-btn',
                                    style={
                                        'backgroundColor': '#e74c3c',
                                        'color': 'white',
                                        'border': 'none',
                                        'padding': '10px 20px',
                                        'borderRadius': '5px',
                                        'cursor': 'pointer',
                                        'fontSize': '16px',
                                        'marginTop': '10px',
                                    })
                    ])
                ], style={
                    'width': '320px',
                    'minWidth': '240px',
                    'maxWidth': '350px',
                    'display': 'inline-block',
                    'verticalAlign': 'top',
                    'padding': '32px 24px 32px 24px',
                    'margin': '32px 24px 32px 0',
                    'backgroundColor': '#fff',
                    'borderRadius': '14px',
                    'boxShadow': '0 4px 24px rgba(44,62,80,0.10)',
                }),

                html.Div([
                    dcc.Graph(id='3d-graph', style={'height': '600px', 'backgroundColor': '#fafbfc', 'borderRadius': '8px', 'boxShadow': '0 2px 12px rgba(44,62,80,0.08)'}),
                ], style={
                    'width': 'calc(100% - 350px)',
                    'minWidth': '350px',
                    'display': 'inline-block',
                    'verticalAlign': 'top',
                    'padding': '32px 24px 32px 0',
                })
            ], style={
                'display': 'flex',
                'flexDirection': 'row',
                'justifyContent': 'center',
                'alignItems': 'flex-start',
                'width': '100%',
                'maxWidth': '1400px',
                'margin': '0 auto',
                'backgroundColor': '#f6f8fa',
                'borderRadius': '18px',
                'boxShadow': '0 2px 24px rgba(44,62,80,0.06)',
            }),

            # Componente oculto para atualiza√ß√£o autom√°tica
            dcc.Interval(
                id='interval-component',
                interval=200,  # Atualizar a cada 200ms (5 FPS)
                n_intervals=0
            ),

            # Store para dados
            dcc.Store(id='reset-trigger', data=0)
        ])

        # Callbacks
        @self.app.callback(
            [Output('3d-graph', 'figure'),
             Output('status-info', 'children')],
            [Input('interval-component', 'n_intervals'),
             Input('reset-trigger', 'data')]
        )
        def update_plot_and_status(n, reset_count):
            return self.get_current_figure(), self.get_status_info()

        @self.app.callback(
            Output('reset-trigger', 'data'),
            [Input('reset-btn', 'n_clicks')],
            prevent_initial_call=True
        )
        def reset_position(n_clicks):
            if n_clicks:
                self.reset_visualization()
                return n_clicks
            return 0

    def get_current_figure(self):
        """Obter figura atual do Plotly com o grafo"""
        # Obter posi√ß√µes do grafo
        positions = nx.get_node_attributes(self.graph, 'pos')

        # Extrair coordenadas dos n√≥s
        node_x = [positions[node][0] for node in self.graph.nodes()]
        node_y = [positions[node][1] for node in self.graph.nodes()]
        node_z = [positions[node][2] for node in self.graph.nodes()]

        # Extrair coordenadas das arestas
        edge_x, edge_y, edge_z = [], [], []
        for edge in self.graph.edges():
            node1, node2 = edge
            edge_x.extend([positions[node1][0], positions[node2][0], None])
            edge_y.extend([positions[node1][1], positions[node2][1], None])
            edge_z.extend([positions[node1][2], positions[node2][2], None])

        # Criar figura
        fig = go.Figure()

        # Adicionar arestas
        fig.add_trace(go.Scatter3d(
            x=edge_x, y=edge_y, z=edge_z,
            mode='lines',
            line=dict(width=3, color='gray'),
            name='Arestas',
            showlegend=False,
            hoverinfo='skip'
        ))

        # Cores dos n√≥s baseadas no gesto
        node_colors = {
            'open_hand': '#2ecc71',  # Verde - Rota√ß√£o
            'closed_fist': '#3498db',  # Azul - Movimento
            'none': '#e74c3c'  # Vermelho - Nenhum
        }
        color = node_colors.get(self.current_gesture, '#e74c3c')

        # Adicionar n√≥s
        fig.add_trace(go.Scatter3d(
            x=node_x, y=node_y, z=node_z,
            mode='markers',
            marker=dict(
                size=8,
                color=color,
                opacity=0.8,
                line=dict(width=2, color='white')
            ),
            text=[f'N√≥ {i}' for i in self.graph.nodes()],
            name='N√≥s do Grafo',
            hovertemplate='%{text}<br>X: %{x:.2f}<br>Y: %{y:.2f}<br>Z: %{z:.2f}<extra></extra>'
        ))

        # Configurar layout com controle de c√¢mera
        fig.update_layout(
            scene=dict(
                xaxis=dict(title='Eixo X', gridcolor='lightgray'),
                yaxis=dict(title='Eixo Y', gridcolor='lightgray'),
                zaxis=dict(title='Eixo Z', gridcolor='lightgray'),
                bgcolor='rgba(240,240,240,0.1)',
                camera=dict(
                    eye=dict(
                        x=self.camera_eye['x'] * self.zoom_factor,
                        y=self.camera_eye['y'] * self.zoom_factor,
                        z=self.camera_eye['z'] * self.zoom_factor
                    ),
                    center=dict(
                        x=self.camera_center['x'],
                        y=self.camera_center['y'],
                        z=self.camera_center['z']
                    )
                ),
                aspectmode='cube'
            ),
            title=f'Grafo 3D - Gesto: {self.current_gesture} | Zoom: {self.zoom_factor:.2f}',
            showlegend=True,
            margin=dict(l=0, r=0, t=40, b=0),
            font=dict(size=12)
        )

        return fig

    def get_status_info(self):
        """Obter informa√ß√µes de estatus"""
        status_color = '#27ae60' if self.hand_detected else '#e74c3c'
        gesture_icons = {
            'open_hand': '‚úã',
            'closed_fist': '‚úä',
            'none': '‚ùå'
        }

        # Determinar posi√ß√£o da m√£o
        hand_pos_text = ""
        if self.hand_detected:
            if self.hand_position['x'] < 0.3:
                hand_pos_text = "‚Üê Esquerda"
            elif self.hand_position['x'] > 0.7:
                hand_pos_text = "‚Üí Direita"
            else:
                hand_pos_text = "‚Üî Centro"

            if self.hand_position['y'] < 0.3:
                hand_pos_text += " ‚Üë Cima"
            elif self.hand_position['y'] > 0.7:
                hand_pos_text += " ‚Üì Baixo"

        return html.Div([
            html.P(f"üéØ M√£o Detectada: ", style={'margin': '5px 0', 'fontWeight': 'bold'}),
            html.Span(f"{'Sim' if self.hand_detected else 'N√£o'}",
                      style={'color': status_color, 'fontWeight': 'bold'}),

            html.P(f"üëã Gesto: {gesture_icons.get(self.current_gesture, '‚ùì')} {self.current_gesture}",
                   style={'margin': '5px 0'}),

            html.P(f"üìç Posi√ß√£o da M√£o: {hand_pos_text}",
                   style={'margin': '5px 0', 'fontSize': '12px'}),

            html.Hr(),
            html.H4("Controles:", style={'margin': '10px 0', 'color': '#34495e', 'fontSize': '14px'}),

            html.Div([
                html.P("‚úã M√ÉO ABERTA - Rota√ß√£o da Visualiza√ß√£o:",
                       style={'margin': '5px 0', 'fontWeight': 'bold', 'color': '#2ecc71'}),
                html.P("‚Ä¢ Esquerda/Direita: Rotaciona horizontalmente",
                       style={'margin': '2px 0 2px 20px', 'fontSize': '11px'}),
                html.P("‚Ä¢ Cima/Baixo: Zoom in/ Zoom out",
                       style={'margin': '2px 0 2px 20px', 'fontSize': '11px'}),
            ]),

            html.Div([
                html.P("‚úä M√ÉO FECHADA - Movimento da Visualiza√ß√£o:",
                       style={'margin': '5px 0', 'fontWeight': 'bold', 'color': '#3498db'}),
                html.P("‚Ä¢ Move a visualiza√ß√£o para onde a m√£o aponta",
                       style={'margin': '2px 0 2px 20px', 'fontSize': '11px'}),
            ]),

            html.Hr(),
            html.P(f"üîç Zoom: {self.zoom_factor:.2f}", style={'margin': '2px 0'}),
            html.P(f"üìä N√≥s: {len(self.graph.nodes())}", style={'margin': '2px 0'}),
            html.P(f"üìä Arestas: {len(self.graph.edges())}", style={'margin': '2px 0'})
        ])

    def update_visualization_controls(self, hand_data, gesture):
        """Atualizar controles da visualiza√ß√£o baseado na m√£o e gesto (modo extremidade: giro/pan/zoom)"""
        if not hand_data:
            return

        # Inicializar atributos esf√©ricos se n√£o existirem ou estiverem None
        if (not hasattr(self, 'camera_radius') or self.camera_radius is None or
            not hasattr(self, 'camera_theta') or self.camera_theta is None or
            not hasattr(self, 'camera_phi') or self.camera_phi is None):
            x, y, z = self.camera_eye['x'], self.camera_eye['y'], self.camera_eye['z']
            self.camera_radius = math.sqrt(x**2 + y**2 + z**2)
            self.camera_theta = math.atan2(y, math.sqrt(x**2 + z**2))
            self.camera_phi = math.atan2(x, z)

        x = hand_data['x']
        y = hand_data['y']
        pan_step = 0.12
        rot_step = 0.10
        zoom_step = 0.12

        # --- GIRO/ZOOM (m√£o aberta nas extremidades) ---
        if gesture == "open_hand":
            # Esquerda/Direita: gira azimute
            if x < 0.15:
                self.camera_phi -= rot_step
            elif x > 0.85:
                self.camera_phi += rot_step
            # Cima/Baixo: gira eleva√ß√£o
            if 0.25 <= y <= 0.75:
                pass  # S√≥ gira se n√£o estiver nas bordas verticais
            if y < 0.25:
                self.camera_theta -= rot_step
                # Zoom in se m√£o aberta no topo
                self.camera_radius = max(1.0, self.camera_radius - zoom_step)
                print(f'[ZOOM DEBUG] camera_radius (in): {self.camera_radius}')
            elif y > 0.75:
                self.camera_theta += rot_step
                # Zoom out se m√£o aberta na base
                self.camera_radius = min(30.0, self.camera_radius + zoom_step)
                print(f'[ZOOM DEBUG] camera_radius (out): {self.camera_radius}')
            # Limitar theta
            self.camera_theta = max(-math.pi/2 + 0.05, min(math.pi/2 - 0.05, self.camera_theta))
                # --- PAN (m√£o fechada nas extremidades) ---
            '''
            elif gesture == "closed_fist":
                if self.previous_hand_position:
                    dx = x - self.previous_hand_position['x']
                    dy = y - self.previous_hand_position['y']
                    self.camera_center['x'] -= dx * self.movement_sensitivity
                    self.camera_center['y'] += dy * self.movement_sensitivity
                    print(f"[PAN DEBUG] Œîx: {dx:.3f}, Œîy: {dy:.3f}")
            '''
        elif gesture == "closed_fist":
            moved = False
            if x < 0.25:
                self.camera_center['x'] -= pan_step
                moved = True
            elif x > 0.75:
                self.camera_center['x'] += pan_step
                moved = True
            if y < 0.25:
                self.camera_center['y'] += pan_step
                moved = True
            elif y > 0.75:
                self.camera_center['y'] -= pan_step
                moved = True
            if moved:
                print(f"[PAN DEBUG] camera_center: {self.camera_center}")
        ''''''

        # Atualizar posi√ß√£o da c√¢mera (esf√©rico ‚Üí cartesiano)
        r = self.camera_radius * self.zoom_factor
        theta = self.camera_theta
        phi = self.camera_phi
        self.camera_eye['x'] = r * math.sin(theta) * math.sin(phi)
        self.camera_eye['y'] = r * math.cos(theta)
        self.camera_eye['z'] = r * math.sin(theta) * math.cos(phi)

        ''' '''
        new_eye_x = r * math.sin(theta) * math.sin(phi)
        new_eye_y = r * math.cos(theta)
        new_eye_z = r * math.sin(theta) * math.cos(phi)

        #### 
        '''
        if self.previous_hand_position:
            alpha = self.smoothing_factor
            self.camera_eye['x'] = (1 - alpha) * self.camera_eye['x'] + alpha * new_eye_x
            self.camera_eye['y'] = (1 - alpha) * self.camera_eye['y'] + alpha * new_eye_y
            self.camera_eye['z'] = (1 - alpha) * self.camera_eye['z'] + alpha * new_eye_z
        else:
            self.camera_eye['x'] = new_eye_x
            self.camera_eye['y'] = new_eye_y
            self.camera_eye['z'] = new_eye_z
        ####
        '''
        # Atualizar posi√ß√£o anterior (n√£o usado para l√≥gica de extremidade)
        self.previous_hand_position = {'x': x, 'y': y}

    def process_frame(self):
        """Processar frame da c√¢mera"""
        ret, frame = self.cap.read()
        if not ret:
            return None, False

        # Espelhar horizontalmente
        frame = cv2.flip(frame, 1)
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Processar com MediaPipe
        results = self.hands.process(rgb_frame)

        hand_detected = False

        if results.multi_hand_landmarks:
            hand_detected = True

            for hand_landmarks in results.multi_hand_landmarks:
                # Desenhar landmarks
                self.mp_draw.draw_landmarks(
                    frame, hand_landmarks, self.mp_hands.HAND_CONNECTIONS
                )

                # Detectar gesto
                gesture = detect_gestures(hand_landmarks.landmark)
                self.current_gesture = gesture

                # Extrair posi√ß√£o da m√£o (usar ponto do pulso como refer√™ncia)
                wrist = hand_landmarks.landmark[0]
                hand_data = {
                    'x': wrist.x,
                    'y': wrist.y,
                    'z': wrist.z
                }

                # Atualizar posi√ß√£o da m√£o para exibi√ß√£o
                self.hand_position = {'x': wrist.x, 'y': wrist.y}


                # Atualizar controles da visualiza√ß√£o
                self.update_visualization_controls(hand_data, gesture)

        else:
            self.current_gesture = "none"

        self.hand_detected = hand_detected

        # Adicionar informa√ß√µes no frame
        cv2.putText(frame, f"Mao detectada: {'Sim' if hand_detected else 'Nao'}",
                    (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0) if hand_detected else (0, 0, 255), 2)
        cv2.putText(frame, f"Gesto: {self.current_gesture}",
                    (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)

        # Mostrar posi√ß√£o da m√£o
        if hand_detected:
            pos_text = ""
            if self.hand_position['x'] < 0.3:
                pos_text += "ESQ "
            elif self.hand_position['x'] > 0.7:
                pos_text += "DIR "
            if self.hand_position['y'] < 0.3:
                pos_text += "CIMA"
            elif self.hand_position['y'] > 0.7:
                pos_text += "BAIXO"
            cv2.putText(frame, f"Posicao: {pos_text}",
                        (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

        cv2.putText(frame, f"Zoom: {self.zoom_factor:.2f}",
                    (10, 120), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

        # Instru√ß√µes
        cv2.putText(frame, "Controles:",
                    (10, frame.shape[0] - 140), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 1)
        cv2.putText(frame, "Mao aberta: Rotacao da visualizacao",
                    (10, frame.shape[0] - 120), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 0), 1)
        cv2.putText(frame, "Mao fechada: Movimento da visualizacao",
                    (10, frame.shape[0] - 100), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 0), 1)
        cv2.putText(frame, "Pin√ßa (polegar+indicador): Zoom",
                    (10, frame.shape[0] - 80), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 0), 1)
        cv2.putText(frame, "Pressione 'q' para sair",
                    (10, frame.shape[0] - 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 1)
        cv2.putText(frame, "Pressione 'r' para resetar",
                    (10, frame.shape[0] - 40), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 1)

        return frame, hand_detected

    def reset_visualization(self):
        """Resetar visualiza√ß√£o do grafo"""
        print("[RESET DEBUG] reset_visualization foi chamado!")
        #self.camera_eye = {'x': 1.5, 'y': 1.5, 'z': 1.5}


        self.camera_eye = {'x': 1, 'y': 1, 'z': 1}

        self.camera_eye = self.normalize_vector(self.camera_eye) ###



        self.camera_center = {'x': 0, 'y': 0, 'z': 0}
        self.camera_radius = 5.0
        self.zoom_factor = 1.0
        self.current_gesture = "none"
        self.previous_hand_position = None
        if hasattr(self, 'previous_pinch_distance'):
            delattr(self, 'previous_pinch_distance')
        print("‚úÖ Visualiza√ß√£o resetada!")

    def camera_thread(self):
        """Thread para processar c√¢mera"""
        print("üìπ Iniciando thread da c√¢mera...")

        while self.running:
            frame, hand_detected = self.process_frame()

            if frame is not None:
                cv2.imshow('Hand Motion Graph Control - Camera Feed', frame)

                # Verificar teclas
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q'):
                    self.running = False
                    self.cleanup()
                    import sys
                    sys.exit(0)
                elif key == ord('r'):
                    self.reset_visualization()

            #time.sleep(0.033)  # ~30 FPS
            cv2.waitKey(1)

    def run(self):
        """Executar aplica√ß√£o principal"""
        print("ü§ö Iniciando controle 3D de grafo com gestos da m√£o...")
        print("=" * 70)
        print("üìã NOVOS CONTROLES:")
        print("1. ‚úã M√ÉO ABERTA - Rota√ß√£o da Visualiza√ß√£o:")
        print("   ‚Ä¢ Mover m√£o para ESQUERDA/DIREITA = Rotaciona horizontalmente")
        print("   ‚Ä¢ Mover m√£o para CIMA/BAIXO = Rotaciona verticalmente")
        print()
        print("2. ‚úä M√ÉO FECHADA - Movimento da Visualiza√ß√£o:")
        print("   ‚Ä¢ Move a visualiza√ß√£o para onde a m√£o estiver apontando")
        print("   ‚Ä¢ ESQUERDA/DIREITA/CIMA/BAIXO = Move visualiza√ß√£o")
        print()
        print("3. ü§è PIN√áA (polegar + indicador) - Zoom:")
        print("   ‚Ä¢ Fechar a pin√ßa = Zoom IN (aproximar)")
        print("   ‚Ä¢ Abrir a pin√ßa = Zoom OUT (afastar)")
        print()
        print("4. Teclas:")
        print("   ‚Ä¢ 'q' = Sair")
        print("   ‚Ä¢ 'r' = Resetar visualiza√ß√£o")
        print("=" * 70)

        # Verificar se a c√¢mera est√° dispon√≠vel
        if not self.cap.isOpened():
            print("‚ùå Erro: N√£o foi poss√≠vel acessar a c√¢mera")
            return

        self.running = True

        try:
            # Iniciar thread da c√¢mera
            camera_thread = Thread(target=self.camera_thread, daemon=True)
            camera_thread.start()

            # Encontrar porta livre
            port = find_free_port()

            print(f"üåê Iniciando servidor web na porta {port}...")
            print(f"üîó Acesse: http://localhost:{port}")

            # Abrir navegador automaticamente
            webbrowser.open(f'http://localhost:{port}')

            # Suprimir logs HTTP do Flask/Dash
            import logging
            log = logging.getLogger('werkzeug')
            log.setLevel(logging.ERROR)

            # Executar Dash app
            self.app.run(debug=False, port=port, host='0.0.0.0')

        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Interrompido pelo usu√°rio")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
        finally:
            self.cleanup()

    def cleanup(self):
        """Limpar recursos"""
        print("üßπ Limpando recursos...")
        self.running = False
        if self.cap:
            self.cap.release()
        cv2.destroyAllWindows()
        print("‚úÖ Recursos liberados. At√© logo! üëã")


def main():
    """Fun√ß√£o principal"""
    try:
        
        camnum = int(input("Digite o n√∫mero da c√¢mera (e.g.: 0): "))

        # Verificar se a c√¢mera est√° dispon√≠vel
        test_cap = cv2.VideoCapture(camnum)
        if not test_cap.isOpened():
            print("‚ùå Erro: N√£o foi poss√≠vel acessar a c√¢mera")
            print("üí° Certifique-se de que:")
            print("   - A c√¢mera est√° conectada")
            print("   - Nenhum outro aplicativo est√° usando a c√¢mera")
            print("   - Voc√™ tem permiss√£o para acessar a c√¢mera")
            return
        test_cap.release()

        # Criar e executar aplica√ß√£o
        app = HandMotionGraph3D()
        app.run()

    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print("\nüí° Para instalar as depend√™ncias necess√°rias, execute:")
        print("pip install opencv-python mediapipe plotly numpy dash networkx")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")


if __name__ == "__main__":
    main()
